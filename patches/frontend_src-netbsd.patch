diff --git a/sys/arch/amd64/include/param.h b/sys/arch/amd64/include/param.h
index 8acacb9938de..77237af366f1 100644
--- a/sys/arch/amd64/include/param.h
+++ b/sys/arch/amd64/include/param.h
@@ -83,10 +83,10 @@
  * clusters (MAPPED_MBUFS), MCLBYTES must also be an integral multiple
  * of the hardware page size.
  */
-#define	MSIZE		512		/* size of an mbuf */
+#define	MSIZE		4096		/* size of an mbuf */
 
 #ifndef MCLSHIFT
-#define	MCLSHIFT	11		/* convert bytes to m_buf clusters */
+#define	MCLSHIFT	12		/* convert bytes to m_buf clusters */
 					/* 2K cluster can hold Ether frame */
 #endif	/* MCLSHIFT */
 
diff --git a/sys/dev/pci/ixgbe/ixgbe.c b/sys/dev/pci/ixgbe/ixgbe.c
index 93fc8c03f8fd..3f0079f3a5fc 100644
--- a/sys/dev/pci/ixgbe/ixgbe.c
+++ b/sys/dev/pci/ixgbe/ixgbe.c
@@ -306,7 +306,7 @@ MODULE_DEPEND(ix, netmap, 1, 1, 1);
  * is varied over time based on the
  * traffic for that interrupt vector
  */
-static bool ixgbe_enable_aim = true;
+static bool ixgbe_enable_aim = false;
 #define SYSCTL_INT(_a1, _a2, _a3, _a4, _a5, _a6, _a7)
 SYSCTL_INT(_hw_ix, OID_AUTO, enable_aim, CTLFLAG_RDTUN, &ixgbe_enable_aim, 0,
     "Enable adaptive interrupt moderation");
@@ -6445,6 +6445,8 @@ ixgbe_allocate_legacy(struct adapter *adapter,
 	const char	*intrstr = NULL;
 	int defertx_error = 0, error;
 
+	/* Used in ixgbe_enable_intr */
+	que->msix = 0;
 	/* We allocate a single interrupt resource */
 	max_type = PCI_INTR_TYPE_MSI;
 	counts[PCI_INTR_TYPE_MSIX] = 0;
@@ -6776,7 +6778,8 @@ ixgbe_configure_interrupts(struct adapter *adapter)
 	 *  NetBSD only: Use single vector MSI when number of CPU is 1 to save
 	 * interrupt slot.
 	 */
-	if (ncpu == 1)
+	/* Avoid MSI-X path completely for now */
+	/* if (ncpu == 1) */
 		goto msi;
 
 	/* First try MSI-X */
diff --git a/sys/kern/kern_descrip.c b/sys/kern/kern_descrip.c
index 6955b740e3d7..4b71636a5f81 100644
--- a/sys/kern/kern_descrip.c
+++ b/sys/kern/kern_descrip.c
@@ -97,6 +97,8 @@ __KERNEL_RCSID(0, "$NetBSD: kern_descrip.c,v 1.243 2019/02/20 19:42:14 christos
 #include <sys/sysctl.h>
 #include <sys/ktrace.h>
 
+#include <rump/rumpuser.h>
+
 /*
  * A list (head) of open files, counter, and lock protecting them.
  */
@@ -715,6 +717,10 @@ fd_close(unsigned fd)
 	fd_unused(fdp, fd);
 	mutex_exit(&fdp->fd_lock);
 
+	if (rumpuser_fsdom_removefd(fd)) {
+		aprint_normal("fd_close: removefd fails\n");
+	}
+
 	/* Now drop reference to the file itself. */
 	return closef(fp);
 }
@@ -735,6 +741,10 @@ fd_dup(file_t *fp, int minfd, int *newp, bool exclose)
 		fd_tryexpand(p);
 	}
 
+	if (rumpuser_fsdom_setfd(*newp, -1)) {
+		aprint_normal("fd_dup: rumpuser_fsdom_setfd fails\n");
+	}
+
 	curlwp->l_fd->fd_dt->dt_ff[*newp]->ff_exclose = exclose;
 	fd_affix(p, fp, *newp);
 	return 0;
@@ -797,6 +807,12 @@ fd_dup2(file_t *fp, unsigned newfd, int flags)
 	if (ff != NULL) {
 		pool_cache_put(fdfile_cache, ff);
 	}
+
+	if (rumpuser_fsdom_setfd(newfd, -1)) {
+                aprint_normal("fd_dup2: \
+                        rumpuser_fsdom_setfd fails\n");
+        }
+
 	return 0;
 }
 
@@ -1096,6 +1112,11 @@ fd_allocfile(file_t **resultfp, int *resultfd)
 		fd_tryexpand(p);
 	}
 
+	if (rumpuser_fsdom_setfd(*resultfd, -1)) {
+                aprint_normal("fd_allocfile: \
+			rumpuser_fsdom_setfd fails\n");
+        }
+
 	fp = pool_cache_get(file_cache, PR_WAITOK);
 	if (fp == NULL) {
 		fd_abort(p, NULL, *resultfd);
@@ -1189,6 +1210,10 @@ fd_abort(proc_t *p, file_t *fp, unsigned fd)
 	fd_unused(fdp, fd);
 	mutex_exit(&fdp->fd_lock);
 
+	if (rumpuser_fsdom_removefd(fd)) {
+		aprint_normal("fd_abort: removefd fails\n");
+	}
+
 	if (fp != NULL) {
 		KASSERT(fp->f_count == 0);
 		KASSERT(fp->f_cred != NULL);
diff --git a/sys/kern/uipc_usrreq.c b/sys/kern/uipc_usrreq.c
index 40d20664a44b..5bd232ab7997 100644
--- a/sys/kern/uipc_usrreq.c
+++ b/sys/kern/uipc_usrreq.c
@@ -128,6 +128,8 @@ __KERNEL_RCSID(0, "$NetBSD: uipc_usrreq.c,v 1.194 2019/07/29 09:42:17 maxv Exp $
 #include <compat/sys/socket.h>
 #include <compat/net/route_70.h>
 
+#include <rump/rumpuser.h>
+
 /*
  * Unix communications domain.
  *
@@ -1456,6 +1458,10 @@ unp_externalize(struct mbuf *rights, struct lwp *l, int flags)
 			error = EMSGSIZE;
 			goto out;
 		}
+		if (rumpuser_fsdom_setfd(fdp[i], -1)) {
+			aprint_normal("unp_externalize: \
+				rumpuser_fsdom_setfd fails\n");
+		}
 	}
 
 	/*
diff --git a/sys/rump/include/rump/rumpuser.h b/sys/rump/include/rump/rumpuser.h
index bbdcbb0cc377..8576011010b2 100644
--- a/sys/rump/include/rump/rumpuser.h
+++ b/sys/rump/include/rump/rumpuser.h
@@ -38,6 +38,7 @@
 #endif
 struct lwp;
 
+#include <sys/types.h>
 /*
  * init
  */
@@ -67,6 +68,33 @@ struct rumpuser_hyperup {
 };
 int rumpuser_init(int, const struct rumpuser_hyperup *);
 
+/* filesystem server */
+extern void(*rumpuser_fsdom_init)(void);
+int rumpuser_fsdom_setfd(int, int);
+int rumpuser_fsdom_removefd(int);
+void rumpuser_fsdom_init_fd_table(void);
+
+typedef struct file file_t;
+typedef long int register_t;
+typedef int sy_call_t(struct lwp *, const void *, register_t *);
+extern sy_call_t rumpuser_fsdom_open;
+extern sy_call_t rumpuser_fsdom_read;
+extern sy_call_t rumpuser_fsdom_write;
+extern sy_call_t rumpuser_fsdom_close;
+extern sy_call_t rumpuser_fsdom_fcntl;
+extern sy_call_t rumpuser_fsdom_lseek;
+extern sy_call_t rumpuser_fsdom_fsync;
+extern sy_call_t rumpuser_fsdom_lstat;
+extern sy_call_t rumpuser_fsdom_stat;
+extern sy_call_t rumpuser_fsdom_statvfs1;
+extern sy_call_t rumpuser_fsdom_fstat;
+extern sy_call_t rumpuser_fsdom_pread;
+extern sy_call_t rumpuser_fsdom_pwrite;
+extern sy_call_t rumpuser_fsdom_access;
+extern sy_call_t rumpuser_fsdom_mkdir;
+extern sy_call_t rumpuser_fsdom_chown;
+extern sy_call_t rumpuser_fsdom_dup2;
+
 /*
  * memory allocation
  */
diff --git a/sys/rump/librump/rumpkern/rumpkern_syscalls.c b/sys/rump/librump/rumpkern/rumpkern_syscalls.c
index 96a15f660e92..703b3c6ab842 100644
--- a/sys/rump/librump/rumpkern/rumpkern_syscalls.c
+++ b/sys/rump/librump/rumpkern/rumpkern_syscalls.c
@@ -78,9 +78,9 @@ extern sy_call_t sys_kqueue1;
 extern sy_call_t sys_clock_nanosleep;
 
 static const struct rump_onesyscall mysys[] = {
-	{ 3,	sys_read },
-	{ 4,	sys_write },
-	{ 6,	sys_close },
+	{ 3,	rumpuser_fsdom_read },
+	{ 4,	rumpuser_fsdom_write },
+	{ 6,	rumpuser_fsdom_close },
 	{ 20,	sys_getpid_with_ppid },
 	{ 23,	sys_setuid },
 	{ 24,	sys_getuid_with_euid },
@@ -97,8 +97,8 @@ static const struct rump_onesyscall mysys[] = {
 	{ 80,	sys_setgroups },
 	{ 81,	sys_getpgrp },
 	{ 82,	sys_setpgid },
-	{ 90,	sys_dup2 },
-	{ 92,	sys_fcntl },
+	{ 90,	rumpuser_fsdom_dup2 },
+	{ 92,	rumpuser_fsdom_fcntl },
 	{ 120,	sys_readv },
 	{ 121,	sys_writev },
 	{ 126,	sys_setreuid },
@@ -138,7 +138,7 @@ static const struct rump_onesyscall mysys[] = {
 	{ 435,	sys___kevent50 },
 	{ 436,	sys___pselect50 },
 	{ 437,	sys___pollts50 },
-	{ 440,	sys___fstat50 },
+	{ 440,	rumpuser_fsdom_fstat },
 	{ 446,	sys___timer_settime50 },
 	{ 447,	sys___timer_gettime50 },
 	{ 453,	sys_pipe2 },
diff --git a/sys/rump/librump/rumpvfs/rumpvfs_syscalls.c b/sys/rump/librump/rumpvfs/rumpvfs_syscalls.c
index 4ab1597c337d..d4fa231168db 100644
--- a/sys/rump/librump/rumpvfs/rumpvfs_syscalls.c
+++ b/sys/rump/librump/rumpvfs/rumpvfs_syscalls.c
@@ -113,15 +113,15 @@ extern sy_call_t sys_posix_fallocate;
 extern sy_call_t sys_fdiscard;
 
 static const struct rump_onesyscall mysys[] = {
-	{ 5,	sys_open },
+	{ 5,	rumpuser_fsdom_open},
 	{ 9,	sys_link },
 	{ 10,	sys_unlink },
 	{ 12,	sys_chdir },
 	{ 13,	sys_fchdir },
 	{ 15,	sys_chmod },
-	{ 16,	sys_chown },
+	{ 16,	rumpuser_fsdom_chown },
 	{ 22,	sys_unmount },
-	{ 33,	sys_access },
+	{ 33,	rumpuser_fsdom_access },
 	{ 34,	sys_chflags },
 	{ 35,	sys_fchflags },
 	{ 36,	sys_sync },
@@ -131,17 +131,17 @@ static const struct rump_onesyscall mysys[] = {
 	{ 58,	sys_readlink },
 	{ 60,	sys_umask },
 	{ 61,	sys_chroot },
-	{ 95,	sys_fsync },
+	{ 95,	rumpuser_fsdom_fsync },
 	{ 123,	sys_fchown },
 	{ 124,	sys_fchmod },
 	{ 128,	sys_rename },
 	{ 132,	sys_mkfifo },
-	{ 136,	sys_mkdir },
+	{ 136,	rumpuser_fsdom_mkdir },
 	{ 137,	sys_rmdir },
-	{ 173,	sys_pread },
-	{ 174,	sys_pwrite },
+	{ 173,	rumpuser_fsdom_pread },
+	{ 174,	rumpuser_fsdom_pwrite },
 	{ 191,	sys_pathconf },
-	{ 199,	sys_lseek },
+	{ 199,	rumpuser_fsdom_lseek },
 	{ 200,	sys_truncate },
 	{ 201,	sys_ftruncate },
 	{ 241,	sys_fdatasync },
@@ -158,7 +158,7 @@ static const struct rump_onesyscall mysys[] = {
 	{ 304,	sys_lchflags },
 	{ 354,	sys_fsync_range },
 	{ 356,	sys_getvfsstat },
-	{ 357,	sys_statvfs1 },
+	{ 357,	rumpuser_fsdom_statvfs1 },
 	{ 358,	sys_fstatvfs1 },
 	{ 360,	sys_extattrctl },
 	{ 361,	sys_extattr_set_file },
@@ -193,8 +193,8 @@ static const struct rump_onesyscall mysys[] = {
 	{ 420,	sys___utimes50 },
 	{ 423,	sys___futimes50 },
 	{ 424,	sys___lutimes50 },
-	{ 439,	sys___stat50 },
-	{ 441,	sys___lstat50 },
+	{ 439,	rumpuser_fsdom_stat },
+	{ 441,	rumpuser_fsdom_lstat },
 	{ 450,	sys___mknod50 },
 	{ 451,	sys___fhstat50 },
 	{ 457,	sys_linkat },
diff --git a/sys/sys/cdefs.h b/sys/sys/cdefs.h
index e051e082e900..9f940446d8f1 100644
--- a/sys/sys/cdefs.h
+++ b/sys/sys/cdefs.h
@@ -498,8 +498,10 @@
  * didn't permit keeping the keywords out of the application namespace).
  */
 #if __GNUC_PREREQ__(2, 7) || defined(__lint__)
+#ifndef __printflike
 #define __printflike(fmtarg, firstvararg)	\
 	    __attribute__((__format__ (__printf__, fmtarg, firstvararg)))
+#endif
 #ifndef __syslog_attribute__
 #define __syslog__ __printf__
 #endif
diff --git a/sys/sys/param.h b/sys/sys/param.h
index 00ed6daaf359..1391d857391d 100644
--- a/sys/sys/param.h
+++ b/sys/sys/param.h
@@ -177,7 +177,7 @@
 #define	DEV_BSIZE	(1 << DEV_BSHIFT)	/* 512 */
 
 #ifndef BLKDEV_IOSIZE
-#define	BLKDEV_IOSIZE	2048
+#define	BLKDEV_IOSIZE	(64 * 1024)
 #endif
 
 #ifndef MAXPHYS
